// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM4K.hdl

/**
 * Memória de 16K registros, cada um com 16 bits de largura.
 * O chip facilita operações de leitura e escrita, da seguinte forma:
 *     Leitura: out(t) = RAM16K[address(t)](t)
 *     Escrita: Se load(t-1) então RAM16K[address(t-1)](t) = in(t-1)
 * Em palavras: o chip sempre produz o valor armazenado no local da memória
 * especificado por address. Se load=1, o valor de in é carregado
 * no local da memória especificado por address. Este valor se torna
 * disponível através da saída out a partir do próximo passo de tempo.
 */

CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
	DMux8Way(in=load, sel=address[9..11], a=loada, b=loadb, c=loadc, d=loadd, e=loade, f=loadf, g=loadg, h=loadh);
	RAM512(in=in, load=loada, address=address[0..8], out=outa);
	RAM512(in=in, load=loadb, address=address[0..8], out=outb);
	RAM512(in=in, load=loadc, address=address[0..8], out=outc);
	RAM512(in=in, load=loadd, address=address[0..8], out=outd);
	RAM512(in=in, load=loade, address=address[0..8], out=oute);
	RAM512(in=in, load=loadf, address=address[0..8], out=outf);
	RAM512(in=in, load=loadg, address=address[0..8], out=outg);
	RAM512(in=in, load=loadh, address=address[0..8], out=outh);
	Mux8Way16(a=outa, b=outb, c=outc, d=outd, e=oute, f=outf, g=outg, h=outh, sel=address[9..11], out=out);	
}
